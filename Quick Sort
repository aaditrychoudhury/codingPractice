/*
	To apply the method explained in the hint video, we have to add two more parameters in the function call. This can be done by calling a helper function from given function. The helper function can have three parameters: array, start index, end index.  
	
	Skeleton code to achieve this:
	public class Solution {
		public static void quickSort(int[] input, int startIndex, int endInedx) {
			// your code goes here
		}
	
		public static void quickSort(int[] input) {
			quickSort(input, 0, input.length - 1);
		}
	
	}
	
*/


public class Solution {
    
     
    public static int partitionIndex(int[] input,int sI,int eI){
        
        int pivot = input[sI];
        
        int count = 0;
        int i;
        for(i = sI+1;i<= eI;++i){
            
            if(input[i] <= pivot)//including equal
                count++;
        }
        int pI = sI+count;
        int temp = input[sI];
        input[sI] = input[pI];
        input[pI] = temp;
        
        int j =eI;
        i = sI;
        
        while(i<pI && j>pI){
            
           if(input[i] <= pivot)
               ++i;
            else if(input[j] > pivot)
                --j;
            else{
                temp = input[i];
                input[i] = input[j];
                input[j] = temp;
                ++i;
                --j;
            }
            
        }
        return pI;
    }
    
    public static void quickSort(int[] input, int startIndex, int endIndex){
        
        if(startIndex >= endIndex)
            return;
        int pI = partitionIndex(input, startIndex, endIndex);
        
        quickSort(input,startIndex,pI-1); 
        
        quickSort(input,pI+1,endIndex);
        
    }
	
	public static void quickSort(int[] input) {
		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * No need to print or return the output.
		 * Taking input and printing output is handled automatically.
		 */
        quickSort(input,0,input.length-1);
		
	}
   
	
}
